# Generated by Django 4.1.3 on 2023-03-01 00:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('surname', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=30)),
                ('patronymic', models.CharField(blank=True, max_length=30, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('passport', models.CharField(max_length=20)),
                ('mail', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('email', models.CharField(blank=True, max_length=50, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('breed', models.CharField(choices=[('Achihuahua', 'Achihuahua'), ('Apchihuahua', 'Apchihuahua'), ('Pudel', 'Pudel'), ('Sobaka', 'Sobaka'), ('Dobel', 'Dobel'), ('Ovcharka', 'Ovcharka'), ('Doberman', 'Doberman')], max_length=100)),
                ('full_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('month_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('classof_dog', models.CharField(choices=[('Show', 'Dogs of show class'), ('Breed', 'Dogs of breed class'), ('Pet', 'Dogs of pet class')], max_length=250)),
                ('document', models.CharField(max_length=20, unique=True)),
                ('last_vaccination', models.DateField()),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club', related_query_name='club', to='pet_app.club', verbose_name='Club')),
            ],
        ),
        migrations.CreateModel(
            name='DogParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_dog_number', models.IntegerField()),
                ('status', models.CharField(choices=[('Participated', 'Participated'), ('Suspended', 'Suspended'), ('Not allowed', 'Not allowed'), ('Absence', 'Absence')], max_length=100)),
                ('dateof_reg_dog', models.DateField()),
                ('bill', models.CharField(choices=[('Paid', 'Paid'), ('Not paid', 'Not paid')], max_length=100)),
                ('checkup', models.CharField(choices=[('Passed', 'Medical examination was successfully passed'), ('Not passed', 'Medical examination was not passed')], max_length=100)),
                ('dateof_checkup', models.DateField(blank=True, null=True)),
                ('show_medal', models.CharField(choices=[('Gold', 'Gold for first place'), ('Silver', 'Silver for second place'), ('Bronze', 'Bronze for third place'), ('Audience award', 'Medal as audience sympathy prize')], max_length=250, null=True)),
                ('participant_dog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dog_reg_participation', related_query_name='dog_reg', to='pet_app.dog', verbose_name='Participant-dog')),
            ],
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surname', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=30)),
                ('patronymic', models.CharField(blank=True, max_length=30, null=True)),
                ('passport', models.CharField(max_length=30)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_club', related_query_name='exp_club', to='pet_app.club', verbose_name='Club')),
            ],
        ),
        migrations.CreateModel(
            name='ExpertParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('status', models.CharField(choices=[('Participated', 'Participated'), ('Suspended', 'Suspended'), ('Not allowed', 'Not allowed'), ('Absence', 'Absence')], max_length=250)),
                ('dateof_reg_exp', models.DateField()),
                ('participant_exp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exp_reg_participation', related_query_name='exp_reg', to='pet_app.expert', verbose_name='Participant-expert')),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surname', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=30)),
                ('patronymic', models.CharField(blank=True, max_length=30, null=True)),
                ('passport', models.CharField(max_length=30, unique=True)),
                ('phone_number', models.CharField(max_length=20, unique=True)),
                ('email', models.CharField(blank=True, max_length=50, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('dateof_begin', models.DateTimeField()),
                ('dateof_end', models.DateTimeField()),
                ('city', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=250)),
                ('typeof_show', models.CharField(choices=[('Mono', 'Monobreed exhibition'), ('Poly', 'Polybreed exhibition')], max_length=250)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host', related_query_name='org', to=settings.AUTH_USER_MODEL, verbose_name='Organizer')),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sponsorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_number', models.IntegerField(unique=True)),
                ('dateof_sign', models.DateField()),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor', related_query_name='sponsor', to='pet_app.sponsor', verbose_name='Sponsor')),
                ('sponsor_show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor_show', related_query_name='sponsor_show', to='pet_app.show', verbose_name='Exhibition')),
            ],
        ),
        migrations.CreateModel(
            name='ShowSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('breedof_show', models.CharField(choices=[('Achihuahua', 'Achihuahua'), ('Apchihuahua', 'Apchihuahua'), ('Pudel', 'Pudel'), ('Sobaka', 'Sobaka'), ('Dobel', 'Dobel'), ('Ovcharka', 'Ovcharka'), ('Doberman', 'Doberman')], max_length=50)),
                ('timeof_show', models.DateTimeField()),
                ('numberof_ring', models.IntegerField()),
                ('show_class', models.CharField(choices=[('Puppy', '1-9 m.o'), ('Junior', '9-24 m.o'), ('Open', '15+ m.o'), ('Work', '15+ m.o with certificate'), ('Champions', '15+ m.o with champion certificate'), ('Veteran', '8+ y.o')], max_length=200)),
                ('show_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_schedule', related_query_name='show_schedule', to='pet_app.show', verbose_name='Exhibition')),
            ],
        ),
        migrations.CreateModel(
            name='Grading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('second', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('third', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('sum', models.IntegerField(blank=True)),
                ('dog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dog', related_query_name='dog', to='pet_app.dogparticipation', verbose_name='Dog')),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert', related_query_name='expert', to='pet_app.expertparticipation', verbose_name='Expert')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', related_query_name='schedule', to='pet_app.showschedule', verbose_name='Schedulle')),
            ],
        ),
        migrations.AddField(
            model_name='expertparticipation',
            name='show_exp',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_exp_reg_participation', related_query_name='show_exp_reg', to='pet_app.show', verbose_name='Exhibition'),
        ),
        migrations.AddField(
            model_name='dogparticipation',
            name='show_dog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_reg_dog_participation', related_query_name='show_dog_reg', to='pet_app.show', verbose_name='Exhibition'),
        ),
        migrations.AddField(
            model_name='dog',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', related_query_name='owner', to='pet_app.owner', verbose_name='Owner'),
        ),
        migrations.AlterUniqueTogether(
            name='expertparticipation',
            unique_together={('number', 'show_exp')},
        ),
        migrations.AlterUniqueTogether(
            name='dogparticipation',
            unique_together={('show_dog', 'participant_dog')},
        ),
    ]
